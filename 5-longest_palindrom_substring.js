// 5. Longest Palindrome Substring
// Решение с ютуб канала : Front-end Science с Сергеем Пузанковым
// Сложность алгоритма:
// O(n^2), но с O(1) по памяти
// Input: s = "babad"
// Output: "bab"
// Explanation: "aba" is also a valid answer.
//
//* JavaScript Solution 

const longestPalindrome = function (s) {
    let start = 0;
    let end = 0;

   for (let i = 0; i < s.length; i++) {
       let len1 = expandFromCenter(s, i , i) // не четная подстрока
       let len2 = expandFromCenter(s, i, i + 1) // четная подстрока - нет центрального, поэтому в троке раходимся от 2х центральных
       let len = Math.max(len1, len2) // максимальнаяя длина
    
      if(len > end - start) {
         start =  Math.ceil(i - (len - 1)/2)
         end = Math.floor(i + (len/2))
      }
         
   }
//* здесь будем возвращать максимальную длину подстроки - от центра
    function expandFromCenter(s, L, R) {
      while(L >= 0 && R < s.length && s[L] === s[R]) {
         L--;
         R++;
      }
      return R - L - 1; //3
    }

   return s.substring(start, end + 1) 
}
console.log(longestPalindrome("babad")) // aba


// Надо найти центр палиндрома 
// и будем расширяться от центра до тех пор, пока символы одинаковые слева и справа
// это расширение и даст нам алидром
// и теперь надо удет найти самый длинный
// будем итерироваться по всем символам, расширяться и сравнивать текущий с максимальным
// если да, то сохраняем позиции слева и справа, чтобы потом взять подстроку этого палиндрома
//
// Палиндром может быть как с четным кол-вом символов, так и нет
// тогда центра не будет
//
// Заведем 2 указател - start и end, оба ставим в 0
// Циклом for будем итерироваться по всем символам в строке от 0
// 
// Далее, относительно текущего центра надо расшириться на максимально возможную ширину одинаковых элементов
// реализуем расширение в ф-и expadFromCenter()
// Эта функция будет возвращать макссимальную длину, на которую получилось расшириться
// пока есть куда двигаться и символ на левом указателе равен символу на правом
//
// будем сдвигать указатели от центра
//* пример - babad - двигаемся от центра и указатели зависнут на b и d (0 и 4)
// b и d не равны, поэтому, чтобы получить длину подстроки делаем -1 (R - L - 1) - получаем 3
